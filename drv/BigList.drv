/*
 * Copyright (C) 2010-2017 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package PACKAGE;

import java.util.List;
import java.util.Spliterators;
import it.unimi.dsi.fastutil.BigList;
import it.unimi.dsi.fastutil.Size64;
#if KEY_WIDENED
import WIDENED_PACKAGE.KEY_WIDENED_SPLITERATOR;
import WIDENED_PACKAGE.WIDENED_SPLITERATORS;
#endif

#if ! KEY_CLASS_Reference

/** A type-specific {@link BigList}; provides some additional methods that use polymorphism to avoid (un)boxing.
 *
 * <p>Additionally, this interface strengthens {@link #iterator()}, {@link #listIterator()},
 * {@link #listIterator(long)} and {@link #subList(long,long)}.
 *
 * <p>Besides polymorphic methods, this interfaces specifies methods to copy into an array or remove contiguous
 * sublists. Although the abstract implementation of this interface provides simple, one-by-one implementations
 * of these methods, it is expected that concrete implementation override them with optimized versions.
 *
 * @see List
 */

public interface BIG_LIST KEY_GENERIC extends BigList<KEY_GENERIC_CLASS>, COLLECTION KEY_GENERIC, Size64, Comparable<BigList<? extends KEY_GENERIC_CLASS>> {
#else

/** A type-specific {@link BigList}; provides some additional methods that use polymorphism to avoid (un)boxing.
 *
 * <p>Additionally, this interface strengthens {@link #listIterator()},
 * {@link #listIterator(long)} and {@link #subList(long,long)}.
 *
 * <p>Besides polymorphic methods, this interfaces specifies methods to copy into an array or remove contiguous
 * sublists. Although the abstract implementation of this interface provides simple, one-by-one implementations
 * of these methods, it is expected that concrete implementation override them with optimized versions.
 *
 * @see List
 */

public interface BIG_LIST KEY_GENERIC extends BigList<KEY_GENERIC_CLASS>, COLLECTION KEY_GENERIC, Size64 {
#endif

	/** Returns a type-specific iterator on the elements of this list.
	 *
	 * @apiNote This specification strengthens the one given in {@link java.util.Collection#iterator()}.
	 * @see java.util.Collection#iterator()
	 */
	@Override
	KEY_BIG_LIST_ITERATOR KEY_GENERIC iterator();


	/** Returns a type-specific big-list iterator on this type-specific big list.
	 *
	 * @apiNote This specification strengthens the one given in {@link BigList#listIterator()}.
	 * @see BigList#listIterator()
	 */
	@Override
	KEY_BIG_LIST_ITERATOR KEY_GENERIC listIterator();

	/** Returns a type-specific list iterator on this type-specific big list starting at a given index.
	 *
	 * @apiNote This specification strengthens the one given in {@link BigList#listIterator(long)}.
	 * @see BigList#listIterator(long)
	 */
	@Override
	KEY_BIG_LIST_ITERATOR KEY_GENERIC listIterator(long index);

	@Override
#if SPLITERATOR_ASSURE_OVERRIDE
	abstract KEY_SPLITERATOR KEY_GENERIC spliterator();
#else
	default KEY_SPLITERATOR KEY_GENERIC spliterator() {
#if (defined JDK_PRIMITIVE_SPLITERATOR && !KEY_WIDENED) || KEYS_REFERENCE || KEY_CLASS_Boolean
#if KEY_CLASS_Boolean
		// TODO See the comment in BooleanCollection about how this is inefficient.
#endif
		return SPLITERATORS.AS_KEY_SPLITERATOR(Spliterators.spliterator(
				iterator(), size64(), SPLITERATORS.LIST_SPLITERATOR_CHARACTERISTICS));
#else
		return SPLITERATORS.narrow(KEY_WIDENED_SPLITERATOR_METHOD());
#endif
	}
#endif

#if defined JDK_PRIMITIVE_SPLITERATOR && KEY_WIDENED
	@Override
	default KEY_WIDENED_SPLITERATOR KEY_WIDENED_SPLITERATOR_METHOD() {
		if (this instanceof COLLECTION.ImplementsSpliterator) {
			return SPLITERATORS.widen(spliterator());
		} else {
			return WIDENED_SPLITERATORS.AS_KEY_WIDENED_SPLITERATOR(Spliterators.spliterator(
					KEY_WIDENED_ITERATOR_METHOD(), size64(), SPLITERATORS.LIST_SPLITERATOR_CHARACTERISTICS));
		}
	}
#endif

	/** Returns a type-specific view of the portion of this type-specific big list from the index {@code from}, inclusive, to the index {@code to}, exclusive.
	 *
	 * @apiNote This specification strengthens the one given in {@link BigList#subList(long,long)}.
	 *
	 * @see BigList#subList(long,long)
	 */
	@Override
	BIG_LIST KEY_GENERIC subList(long from, long to);

	/** Copies (hopefully quickly) elements of this type-specific big list into the given big array.
	 *
	 * @param from the start index (inclusive).
	 * @param a the destination big array.
	 * @param offset the offset into the destination big array where to store the first element copied.
	 * @param length the number of elements to be copied.
	 */
	void getElements(long from, KEY_TYPE a[][], long offset, long length);

	/** Removes (hopefully quickly) elements of this type-specific big list.
	 *
	 * @param from the start index (inclusive).
	 * @param to the end index (exclusive).
	 */
	void removeElements(long from, long to);

	/** Add (hopefully quickly) elements to this type-specific big list.
	 *
	 * @param index the index at which to add elements.
	 * @param a the big array containing the elements.
	 */
	void addElements(long index, KEY_GENERIC_TYPE a[][]);

	/** Add (hopefully quickly) elements to this type-specific big list.
	 *
	 * @param index the index at which to add elements.
	 * @param a the big array containing the elements.
	 * @param offset the offset of the first element to add.
	 * @param length the number of elements to add.
	 */
	void addElements(long index, KEY_GENERIC_TYPE a[][], long offset, long length);

	/** Set (hopefully quickly) elements to match the array given.
	 * @param a the big array containing the elements.
	 * @since 8.3.0
	 */
	default void setElements(KEY_GENERIC_TYPE a[][]) {
		setElements(0, a);
	}
	
	/** Set (hopefully quickly) elements to match the array given.
	 * @param index the index at which to start setting elements.
	 * @param a the big array containing the elements.
	 * @since 8.3.0
	 */
	default void setElements(long index, KEY_GENERIC_TYPE a[][]) {
		setElements(index, a, 0, a.length);
	}

	/** Set (hopefully quickly) elements to match the array given.
	 *
	 * Sets each in this list to the corresponding elements in the array, as if by
	 * <pre><code>
	 * ListIterator iter = listIterator(index);
	 * long i = 0;
	 * while (i < length) {
	 *   iter.next();
	 *   iter.set(BigArrays.get(a, offset + i++);
	 * }
	 * </code></pre>
	 * However, the exact implementation may be more efficient, taking into account
	 * whether random access is faster or not, or at the discretion of subclasses,
	 * abuse internals.
	 *
	 * @param index the index at which to start setting elements.
	 * @param a the big array containing the elements
	 * @param offset the offset of the first element to add.
	 * @param length the number of elements to add.
	 * @return the number of elements set
	 * @since 8.3.0
	 */
	default void setElements(long index, KEY_GENERIC_TYPE a[][], long offset, long length) {
		// We can't use AbstractList#ensureIndex, sadly.
		if (index < 0)  throw new IndexOutOfBoundsException("Index (" + index + ") is negative");
		if (index > size64()) throw new IndexOutOfBoundsException("Index (" + index + ") is greater than list size (" + (size64()) + ")");
		BIG_ARRAYS.ensureOffsetLength(a, offset, length);
		if (index + length > size64()) throw new IndexOutOfBoundsException("End index (" + (index + length) + ") is greater than list size (" + size64() + ")");
		KEY_BIG_LIST_ITERATOR KEY_GENERIC iter = listIterator(index);
		long i = 0;
		while (i < length) {
			iter.NEXT_KEY();
			iter.set(BIG_ARRAYS.get(a, offset + i++));
		}
	}

#if KEYS_PRIMITIVE

	/** Inserts the specified element at the specified position in this type-specific big list (optional operation).
	 * @see BigList#add(long,Object)
	 */
	void add(long index, KEY_TYPE key);

	/** Inserts all of the elements in the specified type-specific collection into this type-specific big list at the specified position (optional operation).
	 * @see List#addAll(int,java.util.Collection)
	 */
	boolean addAll(long index, COLLECTION c);

	/** Inserts all of the elements in the specified type-specific big list into this type-specific big list at the specified position (optional operation).
	 * @see List#addAll(int,java.util.Collection)
	 */
	boolean addAll(long index, BIG_LIST c);

	/** Appends all of the elements in the specified type-specific big list to the end of this type-specific big list (optional operation).
	 * @see List#addAll(int,java.util.Collection)
	 */
	boolean addAll(BIG_LIST c);

	/** Returns the element at the specified position.
	 * @see BigList#get(long)
	 */
	KEY_TYPE GET_KEY(long index);

	/** Removes the element at the specified position.
	 * @see BigList#remove(long) */
	KEY_TYPE REMOVE_KEY(long index);

	/** Replaces the element at the specified position in this big list with the specified element (optional operation).
	 * @see BigList#set(long,Object)
	 */
	KEY_TYPE set(long index, KEY_TYPE k);

	/** Returns the index of the first occurrence of the specified element in this type-specific big list, or -1 if this big list does not contain the element.
	 * @see BigList#indexOf(Object)
	 */
	long indexOf(KEY_TYPE k);

	/** Returns the index of the last occurrence of the specified element in this type-specific big list, or -1 if this big list does not contain the element.
	 * @see BigList#lastIndexOf(Object)
	 */
	long lastIndexOf(KEY_TYPE k);

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	void add(long index, KEY_CLASS key);

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	KEY_GENERIC_CLASS get(long index);

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	long indexOf(Object o);

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	long lastIndexOf(Object o);

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	KEY_GENERIC_CLASS remove(long index);

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	KEY_GENERIC_CLASS set(long index, KEY_GENERIC_CLASS k);
#endif

#if defined KEY_COMPARATOR && KEYS_PRIMITIVE
	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead.
	 */
	@Deprecated
	default void unstableSort(final java.util.Comparator<? super KEY_GENERIC_CLASS> comparator) {
		unstableSort(COMPARATORS.AS_KEY_COMPARATOR(comparator));
	}
	
	/** Sorts this list using a sort not assured to be stable.
	 * 
	 * <p>Pass {@code null} to sort using natural ordering.
	 *
	 * <p>This differs from {@link List#sort(java.util.Comparator)} in that the results are
	 * not assured to be stable, but may be a bit faster.
	 *
	 * <p>Unless a subclass specifies otherwise, the results of the method if the list is
	 * concurrently modified during the sort are unspecified.
	 *
	 * @implSpec The default implementation dumps the elements into a list using
	 * {@link #getElements}, sorts the array, then replaces all elements using the
	 * {@link #setElements} function.
	 *
	 * @since 8.3.0
	 */
	default void unstableSort(final KEY_COMPARATOR comparator) {
		// TODO When (or if) toBigArray is added, use that.
		KEY_TYPE[][] elements = BIG_ARRAYS.newBigArray(size64());
		getElements(elements);
		if (comparator == null) {
			BIG_ARRAYS.unstableSort(elements);
		} else {
			BIG_ARRAYS.unstableSort(elements, comparator);
		}
		setElements(elements);
	}
#endif

	/** Reabstracts the inappropriate {@code spliterator} method from the type-specific big list interface. */
	public static interface ImplementsSpliterator KEY_GENERIC extends BIG_LIST KEY_GENERIC, COLLECTION.ImplementsSpliterator KEY_GENERIC {
		// Reabstract the inappropriate default from Collection
		abstract KEY_SPLITERATOR KEY_GENERIC spliterator();

#if defined JDK_PRIMITIVE_SPLITERATOR && KEY_WIDENED
		default KEY_WIDENED_SPLITERATOR KEY_WIDENED_SPLITERATOR_METHOD() {
			return COLLECTION.ImplementsSpliterator.super.KEY_WIDENED_SPLITERATOR_METHOD();
		}
#endif
	}

}