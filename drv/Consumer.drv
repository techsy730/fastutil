/*
 * Copyright (C) 2017-2020 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package PACKAGE;

import java.util.Objects;
import java.util.function.Consumer;

#if KEY_CLASS_Float
/** A type-specific {@link Consumer}; provides methods to consume a primitive type both as object
 * and as primitive.
 *
 * <p><b>WARNING</b>, the fact that this interface extends {@link java.util.function.DoubleConsumer} should
 * be considered deprecated. It will be removed as a superinterface in a future release.
 * Using this as a {@code DoubleConsumer} results in checked narrowing casts.
 *
 * @see Consumer
 * @since 8.0.0
 */
#elif KEY_WIDENED
/** A type-specific {@link Consumer}; provides methods to consume a primitive type both as object
 * and as primitive.
 *
 * <p><b>WARNING</b>, the fact that this interface extends {@link java.util.function.IntConsumer} should
 * be considered deprecated. It will be removed as a superinterface in a future release.
 * Using this as a {@code IntConsumer} results in checked narrowing casts.
 *
 * @see Consumer
 * @since 8.0.0
 */
#else
/** A type-specific {@link Consumer}; provides methods to consume a primitive type both as object
 * and as primitive.
 *
 * @see Consumer
 * @since 8.0.0
 */
#endif
@FunctionalInterface
#ifdef JDK_PRIMITIVE_KEY_CONSUMER
public interface KEY_CONSUMER KEY_GENERIC extends Consumer<KEY_GENERIC_CLASS>, JDK_PRIMITIVE_KEY_CONSUMER {
#else
public interface KEY_CONSUMER KEY_GENERIC extends Consumer<KEY_GENERIC_CLASS> {
#endif

#if !defined JDK_PRIMITIVE_KEY_CONSUMER || KEY_WIDENED
	/**
	 * Performs this operation on the given input.
	 *
	 * @param t the input.
	 */
	void accept(KEY_TYPE t);
#endif

#if KEY_WIDENED
	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	default void accept(final KEY_TYPE_WIDENED t) {
		accept(KEY_NARROWING(t));
	}
#endif

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	default void accept(final KEY_CLASS t) {
		this.accept(t.KEY_VALUE());
	}

#if !defined JDK_PRIMITIVE_KEY_CONSUMER || KEY_WIDENED
    /**
     * Returns a composed type-specific consumer that performs, in sequence, this
     * operation followed by the {@code after} operation.
	 * @see Consumer#andThen
	 */
	default KEY_CONSUMER andThen(final KEY_CONSUMER after) {
		Objects.requireNonNull(after);
		return t -> { accept(t); after.accept(t); };
	}
#endif

#ifdef JDK_PRIMITIVE_KEY_CONSUMER
#if KEY_WIDENED
	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
#endif
	@Override
	default KEY_CONSUMER andThen(final JDK_PRIMITIVE_KEY_CONSUMER after) {
		Objects.requireNonNull(after);
		return t -> { accept(t); after.accept(t); };
	}
#endif

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	default Consumer<KEY_GENERIC_CLASS> andThen(final Consumer<? super KEY_GENERIC_CLASS> after) {
		return Consumer.super.andThen(after);
	}
}
